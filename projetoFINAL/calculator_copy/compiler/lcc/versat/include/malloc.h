#ifndef _MALLOC_H_
#define _MALLOC_H_

#include "alloca.h" /* for sp() */
#define abs(x) (x < 0 ? -x : x)

extern int *_end; /* generated by compiler at the end of the code */

void *malloc(unsigned size) {
	int *ptr;
	for (ptr = _End; *ptr; ptr += abs(*ptr))
		if (*ptr < 0 && size < -*ptr)
			break;
	if (*ptr) {
		if (size + 2 < -*ptr) {
			ptr[size+1] = *ptr +size +1;
			*ptr = size + 1;
		} else
			*ptr = -*ptr;
	} else {
		int pos;
		sp(pos);
		if (ptr + size + 1 >= pos)
			return 0;
		ptr[size+1] = 0;
		*ptr = size + 1;
	}
	return ptr +1;
}

void free(void *mem) {
	int *ptr, *last = 0, size;
	for (ptr = _End; *ptr; last = ptr, ptr += abs(*ptr))
		if (ptr+1 >= (int*)mem)
			break;
	if (ptr+1 != mem) /* mismatch */
		return;
	size = *ptr;
	if (last && *last < 0) { /* merging prev */
		size -= *last;
		ptr = last;
	}
	if (ptr[size] < 0) /* merging next */
		size -= ptr[size];
	if (ptr[size] == 0) /* reducing core */
		size = 0;
	*ptr = -size;
}

void *realloc(void *mem, unsigned size) {
	int *ptr, i;
	for (ptr = _End; *ptr; ptr += abs(*ptr))
		if (ptr+1 >= (int*)mem)
			break;
	if (ptr+1 != mem) /* mismatch */
		return 0;
	if (*ptr >= size) {
		if (ptr[*ptr] == 0) { /* reducing core */
			ptr[size+1] = 0;
			*ptr = size +1;
			
		} else if (*ptr > size + 2) {
			ptr[size+1] = size + 1 - *ptr;
			*ptr = size +1;
		}
		return ptr+1;
	}
	if ((ptr = malloc(size)) == 0) return 0;
	for (i = 1; i <= *((int*)mem); i++)
		ptr[i] = ((int*)mem)[i];
	free(mem);
	return ptr+1;
}

#endif /* _MALLOC_H_ */
